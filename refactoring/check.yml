# コード品質定期検診チェックリスト
# Version: 3.0
# Project: agrilens-zenn
# Purpose: ハッカソン提出に向けたコード品質の向上と、継続的な品質維持
# 特記事項: HTML/JS/CSSとGemini API連携に特化した項目を強化 + APIセキュリティ対応
# 検診後はログを ./log/ へファイルを作成して記録する。日付_にちぢ_code_inspection.log というファイル名で保存する。
# 例：20250626_101607_code_inspection.md

metadata:
  last_checked: "2025-06-26"
  checked_by: "akifumi"
  next_check_date: ""
  overall_score: 0  # 100点満点

# 1. プロジェクト構造とドキュメント (Project Structure & Documentation)
project_structure:
  readme:
    - [ ] README.mdにプロジェクトの目的・背景が明確に記載されている
    - [ ] セットアップ手順が具体的で、誰でも環境構築が可能
    - [ ] 使用技術スタック（バージョン情報含む）が明記されている
    - [ ] デモURL、または動作がわかるスクリーンショットやGIFが掲載されている
  directory_structure:
    - [ ] ディレクトリ構造が直感的（例: /src, /public, /assets, /components）
    - [ ] 不要なファイルや実験用のコードが削除されている
    - [ ] .gitignoreが適切で、不要なファイル（.env, node_modules等）を追跡していない
    - [ ] サーバーサイドコードが適切にモジュール分割されている（src/config, src/middleware等）
  documentation:
    - [ ] .env.exampleが存在し、必要な環境変数がすべて記載されている
    - [ ] システム構成図や主要なデータフロー図がある
    - [ ] 主要な関数やロジックについて、JSDoc形式でコメントが記述されている
    - [ ] セキュリティ要件とアーキテクチャ決定記録（ADR）が文書化されている

# 2. コード品質 (Code Quality)
code_quality:
  general:
    - [ ] Linter (ESLint) と Formatter (Prettier) が導入され、CIで実行されている
    - [ ] 命名規則（変数、関数、ファイル）に一貫性があり、意味が分かりやすい
    - [ ] 1つの関数・ファイルは1つの責任を持つ（単一責任の原則）
    - [ ] ネストが深すぎる箇所（3段階以上）はリファクタリングされている
    - [ ] TODOやFIXMEコメントが整理され、Issue等で管理されている
    - [ ] 不要なコメントアウトされたコードが削除されている
  html_css:
    - [ ] セマンティックHTMLタグ（<main>, <section>, <article>等）が適切に使用されている
    - [ ] W3Cのバリデーションエラーがない
    - [ ] CSSの命名規則（BEM等）があり、スタイルが意図せず競合しない
    - [ ] CSS変数を活用し、色やフォントサイズなどの管理が容易になっている
    - [ ] レスポンシブデザインが考慮され、主要なデバイス幅でレイアウトが崩れない
  javascript:
    - [ ] ES Modulesを利用してコードが適切にモジュール分割されている
    - [ ] DOM操作が効率的に行われ、不要な再描画を防いでいる
    - [ ] `async/await`が正しく使われ、Promiseのハンドリング漏れがない
    - [ ] `console.log`などのデバッグ用コードが本番ビルドに含まれていない

# 3. Gemini API連携 (Gemini API Integration)
gemini_integration:
  security:
    - [ ] APIキーがクライアントサイドのJSコードに直接記述されていない
    - [ ] API呼び出しはサーバーサイド（or BFF）経由で行われ、クライアントにキーが公開されない
    - [ ] APIキーが.envファイルで管理され、リポジトリにコミットされていない
  error_handling:
    - [ ] APIからのエラーレスポンス（レート制限、不正な入力等）を捕捉し、ユーザーにフィードバックしている
    - [ ] APIリクエスト中のローディング状態（スピナー等）がUIに表示される
    - [ ] APIリクエストのタイムアウト処理が実装されている
  performance_and_cost:
    - [ ] ユーザーの連続操作などで不要なAPIリクエストが連続送信されない（デバウンス等）
    - [ ] APIへのリクエスト内容（プロンプト等）が最適化されている
    - [ ] ストリーミングレスポンスを利用し、ユーザーの体感速度を向上させている（該当する場合）
  prompt_management:
    - [ ] プロンプトがコードから分離され、管理・改善しやすい（例: 定数ファイルやテンプレートとして管理）
    - [ ] プロンプトインジェクションに対する基本的な対策が検討されている

# 4. セキュリティ (Security) - 大幅強化
security:
  api_security:
    authentication_authorization:
      - [ ] 全てのAPIエンドポイントに適切な認証機能が実装されている
      - [ ] 認証なしでアクセス可能なエンドポイントが明確に定義・文書化されている
      - [ ] JWTトークンまたはセッション管理が適切に実装されている
      - [ ] 認証情報の有効期限とリフレッシュ機能が実装されている
      - [ ] 権限に基づく認可（Authorization）が各エンドポイントで確認されている
    rate_limiting:
      - [ ] 全ての外部向けAPIエンドポイントにレート制限が実装されている
      - [ ] AIエンドポイント: 3req/min per IP + 100req/day per IP以下に制限されている
      - [ ] 分析エンドポイント: 3req/min per IP以下に制限されている
      - [ ] 認証エンドポイント: 3req/min per IP以下に制限されている
      - [ ] 日単位制限のリセット機能が適切に実装されている
      - [ ] レート制限超過時の適切なエラーメッセージ（429 Too Many Requests）が返される
      - [ ] レート制限がIP、ユーザー、エンドポイント別に適切に設定されている
      - [ ] 制限情報がHTTPヘッダーで返却されている（X-RateLimit-Remaining等）
    input_validation:
      - [ ] 全てのユーザー入力に対して適切なバリデーションが実装されている
      - [ ] プロンプト入力の最大長制限（5000文字以下）が実装されている
      - [ ] GeoJSONデータの形式検証が実装されている
      - [ ] SQLインジェクション対策が実装されている（該当する場合）
      - [ ] XSS（クロスサイトスクリプティング）対策が全ての入力フィールドに実装されている
      - [ ] CSRF（クロスサイトリクエストフォージェリ）対策が実装されている
    token_management:
      - [ ] システム全体でGemini APIのトークン使用量が5M/日以下に制限されている
      - [ ] システム全体でGemma APIのトークン使用量が5M/日以下に制限されている
      - [ ] トークン使用量がリアルタイムで追跡・記録されている
      - [ ] トークン制限到達時にサービスが適切に一時停止される
      - [ ] 日次トークン使用量リセット機能が実装されている（UTC 00:00）
      - [ ] API別トークン使用量統計が生成・保存されている
      - [ ] トークン使用量アラート機能が実装されている（80%到達時等）
      - [ ] 管理者向けトークン使用量監視ダッシュボードが提供されている
      - [ ] プロンプト・レスポンスのトークン数計算が正確に実装されている
      - [ ] トークン使用量ログが適切に記録されている
  prompt_security:
    injection_prevention:
      - [ ] プロンプトインジェクション攻撃の検出機能が実装されている
      - [ ] 危険なパターン（ignore instructions, system prompt等）の検出が実装されている
      - [ ] ユーザー入力のサニタイゼーション処理が実装されている
      - [ ] プロンプトテンプレートがユーザー入力と明確に分離されている
      - [ ] AIモデルへの指示とユーザーデータが混在しない構造になっている
    content_filtering:
      - [ ] 不適切なコンテンツ（暴力、性的、差別的内容）のフィルタリングが実装されている
      - [ ] スパムや悪意のあるコンテンツの検出機能が実装されている
      - [ ] プロンプトの内容ログが適切にマスキングされている（機密情報保護）
  data_security:
    sensitive_data:
      - [ ] 個人情報や機密データが適切に暗号化されている
      - [ ] APIキーや認証情報がログに出力されないよう配慮されている
      - [ ] 環境変数が本番環境で適切に管理されている（Secret Manager等）
      - [ ] データベース接続情報が安全に管理されている（該当する場合）
    transmission_security:
      - [ ] 全ての通信がHTTPS経由で行われている
      - [ ] 適切なHTTPセキュリティヘッダーが設定されている（Helmet.js等）
      - [ ] Cookie設定が安全（Secure, HttpOnly, SameSite）になっている
      - [ ] CORS設定が適切で、不要なオリジンからのアクセスを防いでいる
  error_handling_security:
    information_disclosure:
      - [ ] エラーメッセージから内部実装の詳細が漏洩しないよう配慮されている
      - [ ] スタックトレースが本番環境でクライアントに返されない
      - [ ] データベースエラーメッセージが直接クライアントに返されない
      - [ ] 404エラーでディレクトリ構造が推測されないよう配慮されている
    logging_security:
      - [ ] セキュリティイベント（不正アクセス、認証失敗等）が適切にログ記録されている
      - [ ] ログレベルが適切に設定されている（本番では機密情報をDEBUGレベルに）
      - [ ] ログ改ざん防止機能が実装されている
      - [ ] ログローテーションとアーカイブ機能が実装されている
  dependency_security:
    vulnerability_management:
      - [ ] 依存ライブラリに既知の脆弱性がないかチェックされている（npm audit等）
      - [ ] 定期的な依存関係の更新プロセスが確立されている
      - [ ] 使用していないライブラリが削除されている
      - [ ] サードパーティライブラリのライセンス確認が行われている
  infrastructure_security:
    server_hardening:
      - [ ] 不要なHTTPメソッド（TRACE, OPTIONS等）が無効化されている
      - [ ] サーバー情報（Server ヘッダー等）が隠蔽されている
      - [ ] デフォルトポートが変更されている（該当する場合）
      - [ ] ファイアウォール設定が適切に行われている
    monitoring_alerting:
      - [ ] セキュリティ監視機能が実装されている
      - [ ] 異常なアクセスパターンの検出機能が実装されている
      - [ ] インシデント対応手順が文書化されている
      - [ ] セキュリティアラートの通知機能が実装されている

# 5. パフォーマンス (Performance)
performance:
  - [ ] 画像が最適化（圧縮、WebP形式の利用）されている
  - [ ] CSSやJSファイルが圧縮（minify）されている
  - [ ] ブラウザのキャッシュが適切に活用されている
  - [ ] Lighthouseスコアで大きな問題（特にPerformance, Accessibility）が指摘されていない
  - [ ] APIレスポンス時間が適切（95%のリクエストが2秒以内）
  - [ ] 同時接続負荷テストが実施されている
  - [ ] メモリリークが発生していない

# 6. UI/UXとアクセシビリティ (UI/UX & Accessibility)
ui_ux_accessibility:
  - [ ] UIコンポーネントのデザインや挙動に一貫性がある
  - [ ] エラーメッセージが分かりやすく、ユーザーが次に行うべきアクションを示している
  - [ ] 全ての画像に適切な`alt`属性が設定されている
  - [ ] キーボードのみで主要な操作が可能である
  - [ ] 見出しタグ（<h1>, <h2>等）が文書構造として正しく使用されている
  - [ ] 十分なカラーコントラストが確保されている

# 7. Gitとデプロイ (Version Control & Deployment)
git_and_deployment:
  - [ ] コミットメッセージが規約（Conventional Commits等）に沿って分かりやすく書かれている
  - [ ] main/masterブランチが保護され、直接pushできないようになっている
  - [ ] 不要なブランチが定期的に削除されている
  - [ ] ビルドプロセスが自動化されており、誰でも同じ成果物を生成できる
  - [ ] 本番デプロイ時のセキュリティチェックリストが運用されている
  - [ ] 環境別の設定管理が適切に行われている

# 8. ハッカソン特有項目 (Hackathon Specifics)
hackathon_specific:
  - [ ] デモがスムーズに行える（キラー機能がすぐに実演できる）
  - [ ] Geminiの活用方法がこのプロジェクトの独自性・魅力として明確に示されている
  - [ ] READMEやプレゼン資料で、技術的な挑戦や工夫した点がアピールされている
  - [ ] ライセンス情報（MITなど）が明記されたLICENSEファイルが存在する

# 9. テストとCI/CD (Testing & CI/CD) - 新規追加
testing_cicd:
  unit_testing:
    - [ ] 重要なビジネスロジックに単体テストが実装されている
    - [ ] テストカバレッジが85%以上達成されている
    - [ ] セキュリティ機能（認証、バリデーション等）のテストが実装されている
    - [ ] モック機能を活用して外部依存をテストで分離している
  integration_testing:
    - [ ] APIエンドポイントの統合テストが実装されている
    - [ ] 正常ケースと異常ケースの両方がテストされている
    - [ ] セキュリティ攻撃シナリオのテストが実装されている
  security_testing:
    - [ ] プロンプトインジェクション攻撃のテストが実装されている
    - [ ] レート制限回避テストが実装されている
    - [ ] 認証バイパステストが実装されている
    - [ ] 入力検証回避テストが実装されている
  cicd_pipeline:
    - [ ] 自動テスト実行のCI/CDパイプラインが構築されている
    - [ ] セキュリティスキャンが自動実行されている
    - [ ] コード品質チェックが自動実行されている
    - [ ] デプロイ前のセキュリティゲートが設定されている

# アクションアイテム (Action Items)
action_items:
  critical_security:  # セキュリティ緊急対応
    - item: "APIエンドポイントへのレート制限実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
    - item: "プロンプトインジェクション対策実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
    - item: "入力検証ミドルウェア実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
  high_priority:  # 提出前に必須
    - item: "認証・認可機能実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
    - item: "セキュリティログ記録機能実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
    - item: "server.jsのモジュール分割実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
  medium_priority:  # できれば対応
    - item: "セキュリティテスト実装"
      assigned_to: ""
      deadline: ""
      status: "未着手"
    - item: "CI/CDパイプライン構築"
      assigned_to: ""
      deadline: ""
      status: "未着手"
  low_priority:  # 時間があれば対応
    - item: "セキュリティ監視ダッシュボード構築"
      assigned_to: ""
      deadline: ""
      status: "未着手"

# スコアリング（各セクション10点満点、合計90点）
scoring:
  project_structure: 0
  code_quality: 0
  gemini_integration: 0
  security: 0  # 重要度により配点増加
  performance: 0
  ui_ux_accessibility: 0
  git_and_deployment: 0
  hackathon_specific: 0
  testing_cicd: 0
  total: 0

# セキュリティリスク評価
security_risk_assessment:
  current_risk_level: "High"  # Critical/High/Medium/Low
  identified_vulnerabilities:
    critical: []
    high: []
    medium: []
    low: []
  risk_mitigation_timeline:
    immediate: "レート制限、入力検証、認証機能"
    short_term: "プロンプトインジェクション対策、ログ機能"
    medium_term: "セキュリティテスト、監視機能"
    long_term: "高度なセキュリティ機能、コンプライアンス対応"

# 品質ゲート (Quality Gates)
quality_gates:
  security_gate:
    - "Critical脆弱性: 0件"
    - "High脆弱性: 0件"
    - "認証機能: 100%実装"
    - "入力検証: 100%実装"
    - "レート制限: 100%実装"
  performance_gate:
    - "レスポンス時間: 95%が2秒以内"
    - "テストカバレッジ: 85%以上"
    - "Lighthouse Performance: 90点以上"
  deployment_gate:
    - "全テスト通過: 100%"
    - "セキュリティスキャン: クリア"
    - "コード品質チェック: クリア"

# メモ・備考
notes: |
  - 定期検診は、タイミングを決めて実施する。
  - セキュリティ項目は最優先で対応する。
  - スコアは客観的な指標として活用し、低い項目から優先的に改善に取り組む。
  - セキュリティリスクはCVSS v3.1基準で評価する。
  - 検診後はログを ./log/ へファイルを作成して記録する。日付_にちぢ_code_inspection.log というファイル名で保存する。
  
# 次回アップデート予定
next_update:
  version: "3.1"
  planned_date: "Phase 1完了後"
  planned_improvements:
    - "高度なセキュリティ機能項目追加"